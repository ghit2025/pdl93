package main;

import ALexico.AnLexico;
import AnSintDesRec.AnSintactico;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            // ‚úÖ Configuraci√≥n de archivos
            String archivoCodFuente = "src/ALexico/codigoFuente.txt";
            String archivoTokens = "src/ALexico/Tokens.txt";
            String archivoTablaSimbolos = "src/ALexico/TablaSimbolos.txt";

            // ‚úÖ Leer c√≥digo fuente
            String codigoFuente = leerArchivo(archivoCodFuente);
            System.out.println("=== C√ìDIGO FUENTE ===");
            System.out.println(codigoFuente);
            System.out.println("\n=== INICIANDO AN√ÅLISIS ===");

            // ‚úÖ Crear analizador l√©xico
            System.out.println("1. Creando analizador l√©xico...");
            AnLexico lexico = new AnLexico(codigoFuente, archivoTokens, archivoTablaSimbolos);

            // ‚úÖ Crear analizador sint√°ctico (que internamente crea el sem√°ntico)
            System.out.println("2. Creando analizador sint√°ctico...");
            AnSintactico sintactico = new AnSintactico(lexico);

            // ‚úÖ Ejecutar an√°lisis sint√°ctico-sem√°ntico
            System.out.println("3. Ejecutando an√°lisis sint√°ctico-sem√°ntico...");
            sintactico.P(); // Funci√≥n inicial de tu gram√°tica

            // ‚úÖ Obtener y mostrar resultados
            String parse = sintactico.obtenerParse();
            System.out.println("\n=== RESULTADOS ===");
            System.out.println("Parse generado: " + parse);

            // ‚úÖ CAMBIO: Generar tabla unificada en lugar de cerrar archivos
            System.out.println("4. Generando tabla de s√≠mbolos unificada...");
            sintactico.generarTablaUnificada();

            System.out.println("\n‚úÖ AN√ÅLISIS COMPLETADO EXITOSAMENTE");
            System.out.println("üìÑ Archivos generados:");
            System.out.println("   - Tokens: " + archivoTokens);
            System.out.println("   - Tabla S√≠mbolos Completa: " + archivoTablaSimbolos);

        } catch (RuntimeException e) {
            // ‚úÖ Manejo de errores sint√°cticos y sem√°nticos
            System.err.println("\n‚ùå ERROR DURANTE EL AN√ÅLISIS:");
            System.err.println(e.getMessage());

            // Mostrar tipo de error
            if (e.getMessage().contains("Error sintactico")) {
                System.err.println("üîç Tipo: Error Sint√°ctico");
            } else if (e.getMessage().contains("Error sem√°ntico")) {
                System.err.println("üîç Tipo: Error Sem√°ntico");
            } else {
                System.err.println("üîç Tipo: Error General");
            }

        } catch (IOException e) {
            // ‚úÖ Manejo de errores de archivo
            System.err.println("\n‚ùå ERROR DE ARCHIVO:");
            System.err.println("No se pudo leer el archivo: " + e.getMessage());
            System.err.println("Verifica que el archivo existe y tiene permisos de lectura.");

        } catch (Exception e) {
            // ‚úÖ Manejo de errores inesperados
            System.err.println("\n‚ùå ERROR INESPERADO:");
            System.err.println(e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Lee el contenido completo de un archivo de texto
     */
    private static String leerArchivo(String nombreArchivo) throws IOException {
        StringBuilder contenido = new StringBuilder();

        try (BufferedReader reader = new BufferedReader(new FileReader(nombreArchivo))) {
            String linea;
            while ((linea = reader.readLine()) != null) {
                contenido.append(linea).append("\n");
            }
        }

        return contenido.toString();
    }
}
